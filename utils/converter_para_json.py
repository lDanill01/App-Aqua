import json
import os
import re

# Dados brutos colados do documento
DADOS_TEXTO = """
%_biomassa  g/dia peso(g)	%_vida	temperatura	dia
0,13 0,14 0,50     1 28 1       
0,12 0,08 0,57     1 28 2
0,12 0,10 0,66     1 28 3
0,12 0,11 0,75     1 28 4
0,12 0,13 0,86     1 28 5
0,12 0,14 0,99     1 28 6
0,11 0,17 1,13     1 28 7
0,11 0,14 1,30     1 28 8
0,11 0,16 1,44     1 28 9
0,11 0,18 1,60     1 28 10
0,10 0,20 1,78     1 28 11
0,10 0,22 1,97     1 28 12
0,10 0,24 2,19     1 28 13
0,10 0,27 2,43     1 28 14
0,10 0,25 2,70     1 28 15
0,10 0,27 2,95     1 28 16
0,09 0,30 3,22     1 28 17
0,09 0,32 3,52     1 28 18
0,09 0,35 3,84     1 28 19
0,09 0,39 4,19     1 28 20
0,09 0,42 4,58     1 28 21
0,09 0,35 5,00     1 28 22
0,08 0,37 5,35     1 28 23
0,08 0,40 5,72     1 28 24
0,08 0,42 6,12     1 28 25
0,08 0,45 6,54     1 28 26
0,08 0,49 6,99     1 28 27
0,08 0,52 7,48     1 28 28
0,08 0,48 8,00     1 28 29
0,08 0,51 8,48     1 28 30
0,08 0,54 8,98     1 28 31
0,07 0,57 9,52     1 28 32
0,07 0,60 10,09    1 28 33
0,07 0,64 10,69    1 28 34
0,07 0,67 11,33    1 28 35
0,07 0,72 12,00    1 28 36
0,07 0,76 12,72    1 28 37
0,07 0,80 13,47    1 28 38
0,07 0,85 14,28    1 28 39
0,07 0,90 15,13    1 28 40
0,07 0,96 16,03    1 28 41
0,07 1,01 16,99    1 28 42
0,06 0,97 18,00    1 28 43
0,06 1,02 18,97    1 28 44
0,06 1,08 19,99    1 28 45
0,06 1,14 21,07    1 28 46
0,06 1,20 22,21    1 28 47
0,06 1,26 23,41    1 28 48
0,06 1,33 24,67    1 28 49
0,06 1,13 26,00    1 28 50
0,06 1,18 27,13    1 28 51
0,06 1,23 28,30    1 28 52
0,06 1,28 29,53    1 28 53
0,06 1,34 30,81    1 28 54
0,06 1,39 32,15    1 28 55
0,06 1,45 33,55    1 28 56
0,05 1,51 35,00    1 28 57
0,05 1,57 36,51    1 28 58
0,05 1,64 38,08    1 28 59
0,05 1,71 39,71    1 28 60
0,05 1,78 41,42    1 28 61
0,05 1,86 43,21    1 28 62
0,05 1,94 45,06    1 28 63
0,05 1,90 47,00    1 28 64
0,05 1,97 48,90    1 28 65
0,05 2,05 50,87    1 28 66
0,05 2,14 52,92    1 28 67
0,05 2,22 55,06    1 28 68
0,05 2,31 57,28    1 28 69
0,05 2,41 59,59    1 28 70
0,05 2,41 62,00    1 28 71
0,04 2,51 64,41    1 28 72
0,04 2,61 66,92    1 28 73
0,04 2,71 69,53    1 28 74
0,04 2,81 72,23    1 28 75
0,04 2,92 75,04    1 28 76
0,04 3,03 77,97    1 28 77
0,04 3,06 81,00    1 28 78
0,04 3,17 84,06    1 28 79
0,04 3,29 87,23    1 28 80
0,04 3,42 90,53    1 28 81
0,04 3,55 93,95    1 28 82
0,04 3,68 97,49    1 28 83
0,04 3,82 101,18   1 28 84
0,04 3,25 105,00   1 28 85
0,04 3,35 108,25   1 28 86
0,04 3,46 111,61   1 28 87
0,04 3,56 115,06   1 28 88
0,04 3,67 118,63   1 28 89
0,04 3,79 122,30   1 28 90
0,04 3,91 126,09   1 28 91
0,03 3,91 130,00   1 28 92
0,03 4,03 133,91   1 28 93
0,03 4,15 137,95   1 28 94
0,03 4,28 142,10   1 28 95
0,03 4,41 146,38   1 28 96
0,03 4,54 150,79   1 28 97
0,03 4,67 155,33   1 28 98
0,03 3,98 160,00   1 28 99
0,03 4,08 163,98   1 28 100
0,03 4,18 168,05   1 28 101
0,03 4,28 172,23   1 28 102
0,03 4,39 176,51   1 28 103
0,03 4,50 180,89   1 28 104
0,03 4,61 185,39   1 28 105
0,03 4,65 190,00   1 28 106
0,03 4,76 194,65   1 28 107
0,03 4,88 199,40   1 28 108
0,03 4,99 204,28   1 28 109
0,03 5,12 209,27   1 28 110
0,03 5,24 214,39   1 28 111
0,03 5,37 219,63   1 28 112
0,03 5,32 225,00   1 28 113
0,03 5,45 230,32   1 28 114
0,03 5,58 235,77   1 28 115
0,03 5,71 241,34   1 28 116
0,03 5,84 247,05   1 28 117
0,03 5,98 252,90   1 28 118
0,03 6,12 258,88   1 28 119
0,03 5,38 265,00   1 28 120
0,03 5,48 270,38   1 28 121
0,03 5,60 275,86   1 28 122
0,03 5,71 281,46   1 28 123
0,03 5,83 287,17   1 28 124
0,03 5,94 292,99   1 28 125
0,02 6,06 298,94   1 28 126
0,02 5,42 305,00   1 28 127
0,02 5,51 310,42   1 28 128
0,02 5,61 315,93   1 28 129
0,02 5,71 321,54   1 28 130
0,02 5,81 327,25   1 28 131
0,02 5,91 333,06   1 28 132
0,02 6,03 338,97   1 28 133
0,02 5,58 345,00   1 28 134
0,02 5,67 350,58   1 28 135
0,02 5,76 356,25   1 28 136
0,02 5,85 362,01   1 28 137
0,02 5,95 367,86   1 28 138
0,02 6,04 373,81   1 28 139
0,02 6,15 379,85   1 28 140
0,02 6,00 386,00   1 28 141
0,02 6,09 392,00   1 28 142
0,02 6,19 398,09   1 28 143
0,02 6,28 404,28   1 28 144
0,02 6,38 410,56   1 28 145
0,02 6,48 416,95   1 28 146
0,02 6,57 423,43   1 28 147
0,02 6,16 430,00   1 28 148
0,02 6,25 436,16   1 28 149
0,02 6,34 442,40   1 28 150
0,02 6,43 448,74   1 28 151
0,02 6,52 455,17   1 28 152
0,02 6,61 461,68   1 28 153
0,02 6,70 468,30   1 28 154
0,02 6,19 475,00   1 28 155
0,02 6,27 481,19   1 28 156
0,02 6,35 487,45   1 28 157
0,02 6,43 493,80   1 28 158
0,02 6,51 500,23   1 28 159
0,02 6,60 506,75   1 28 160
0,02 6,65 513,35   1 28 161
0,02 6,33 520,00   1 28 162
0,02 6,41 526,33   1 28 163
0,02 6,49 532,74   1 28 164
0,02 6,57 539,23   1 28 165
0,02 6,65 545,80   1 28 166
0,02 6,73 552,45   1 28 167
0,02 6,83 559,17   1 28 168
0,02 6,75 566,00   1 28 169
0,02 6,83 572,75   1 28 170
0,02 6,91 579,58   1 28 171
0,02 7,00 586,50   1 28 172
0,02 7,08 593,50   1 28 173
0,02 7,16 600,58   1 28 174
0,02 7,26 607,74   1 28 175
0,02 7,30 615,00   1 28 176
0,02 7,39 622,30   1 28 177
0,02 7,48 629,70   1 28 178
0,02 7,57 637,17   1 28 179
0,02 7,66 644,74   1 28 180
0,02 7,75 652,40   1 28 181
0,02 7,85 660,15   1 28 182
0,02 7,86 668,00   1 28 183
0,02 7,95 675,86   1 28 184
0,02 8,04 683,81   1 28 185
0,02 8,14 691,86   1 28 186
0,02 8,24 699,99   1 28 187
0,02 8,33 708,23   1 28 188
0,02 8,44 716,56   1 28 189
0,02 7,75 725,00   1 28 190
0,02 7,83 732,75   1 28 191
0,02 7,92 740,58   1 28 192
0,02 8,00 748,50   1 28 193
0,02 8,09 756,50   1 28 194
0,02 8,17 764,59   1 28 195
0,02 8,24 772,76   1 28 196
0,02 8,17 781,00   1 28 197
0,02 8,25 789,17   1 28 198
0,02 8,34 797,42   1 28 199
0,02 8,43 805,76   1 28 200
0,02 8,51 814,18   1 28 201
0,02 8,60 822,69   1 28 202
0,02 8,70 831,30   1 28 203
0,02 8,33 840,00   1 28 204
0,02 8,41 848,33   1 28 205
0,01 8,49 856,74   1 28 206
0,01 8,58 865,23   1 28 207
0,01 8,66 873,81   1 28 208
0,01 8,75 882,47   1 28 209
0,01 8,79 891,21   1 28 210
0,01 8,33 900,00   1 28 211
0,01 8,41 908,33   1 28 212
0,01 8,49 916,74   1 28 213
0,01 8,57 925,23   1 28 214
0,01 8,65 933,80   1 28 215
0,01 8,73 942,45   1 28 216
0,01 8,83 951,17   1 28 217
0,01 8,35 960,00   1 28 218
0,01 8,42 968,35   1 28 219
0,01 8,50 976,77   1 28 220
0,01 8,57 985,27   1 28 221
0,01 8,64 993,84   1 28 222
0,01 8,72 1.002,48 1 28 223
0,01 8,80 1.011,20 1 28 224
0,01 8,87 1.020,00 1 28 225
0,01 8,95 1.028,87 1 28 226
0,01 9,03 1.037,83 1 28 227
0,01 9,11 1.046,86 1 28 228
0,01 9,19 1.055,96 1 28 229
0,01 9,27 1.065,15 1 28 230
0,01 9,35 1.074,42 1 28 231
0,01 9,43 1.083,77 1 28 232
0,01 9,51 1.093,19 1 28 233
0,01 9,59 1.102,71 1 28 234
0,01 9,68 1.112,30 1 28 235
0,01 9,76 1.121,98 1 28 236
0,01 9,85 1.131,74 1 28 237
0,01 9,87 1.141,58 1 28 238

"""

def processar_dados(texto):
    """Converte texto em JSON estruturado"""
    
    dados_json = {
        "descricao": "Tabela de consulta: %_biomassa, g/dia, peso(g), %_vida, temperatura, dia",
        "versao": "1.0",
        "ultima_atualizacao": "2025-10-23",
        "total_registros": 0,
        "dados": []
    }
    
    linhas = texto.strip().split('\n')
    
    # Pular cabe√ßalho (primeira linha)
    for linha in linhas[1:]:
        if not linha.strip():
            continue
        
        # Usar regex para extrair valores num√©ricos
        valores = re.findall(r'[\d,\.]+', linha.strip())
        
        if len(valores) < 6:
            print(f"Linha ignorada (dados insuficientes): {linha}")
            continue
        
        try:
            # Ordem exata das colunas:
            # %_biomassa  g/dia  peso(g)  %_vida  temperatura  dia
            biomassa_pct = float(valores[0].replace(',', '.'))
            g_dia        = float(valores[1].replace(',', '.'))
            peso_g       = float(valores[2].replace(',', '.'))
            pct_vida     = float(valores[3].replace(',', '.'))
            temperatura  = int(float(valores[4].replace(',', '.')))
            dia          = int(float(valores[5].replace(',', '.')))
            
            # Adicionar registro ao JSON
            dados_json["dados"].append({
                "biomassa_pct": round(biomassa_pct, 2),
                "g_dia": round(g_dia, 2),
                "peso_g": round(peso_g, 2),
                "pct_vida": round(pct_vida, 2),
                "temperatura": temperatura,
                "dia": dia
            })
        
        except (ValueError, IndexError) as e:
            print(f"Erro ao processar linha: {linha} - {e}")
            continue
    
    # Atualizar total de registros
    dados_json["total_registros"] = len(dados_json["dados"])
    
    return dados_json


def salvar_json(dados_json, caminho='data/tabela_consulta.json'):
    """Salva o JSON em arquivo"""
    os.makedirs(os.path.dirname(caminho), exist_ok=True)
    
    with open(caminho, 'w', encoding='utf-8') as f:
        json.dump(dados_json, f, indent=2, ensure_ascii=False)
    
    print(f"‚úì Arquivo salvo: {caminho}")


def exibir_resumo(dados_json):
    """Exibe um resumo dos dados processados"""
    print("\n" + "="*60)
    print("RESUMO DOS DADOS PROCESSADOS")
    print("="*60)
    print(f"Total de registros: {dados_json['total_registros']}")
    print(f"\nPrimeiro registro:")
    print(json.dumps(dados_json['dados'][0], indent=2, ensure_ascii=False))
    print(f"\n√öltimo registro:")
    print(json.dumps(dados_json['dados'][-1], indent=2, ensure_ascii=False))
    print("="*60 + "\n")


if __name__ == "__main__":
    print("üîÑ Processando dados...")
    json_data = processar_dados(DADOS_TEXTO)
    
    if json_data["dados"]:
        exibir_resumo(json_data)
        salvar_json(json_data)
        print("‚úì JSON gerado com sucesso!")
    else:
        print("‚úó Nenhum dado foi processado. Verifique o formato do arquivo.")